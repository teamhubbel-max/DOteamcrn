#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è DO App Platform
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python monitor-deployment.py [app-name]
"""

import requests
import time
import sys
import json
from datetime import datetime
import argparse

class DeploymentMonitor:
    def __init__(self, app_name="doteamcrn", check_interval=30):
        self.app_name = app_name
        self.check_interval = check_interval
        self.api_base = "https://api.digitalocean.com/v2"
        self.session = requests.Session()

        # –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
        self.colors = {
            'green': '\033[0;32m',
            'red': '\033[0;31m',
            'yellow': '\033[1;33m',
            'blue': '\033[0;34m',
            'nc': '\033[0m'  # No Color
        }

    def print_colored(self, text, color='nc'):
        """–í—ã–≤–æ–¥ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        print(f"{self.colors.get(color, '')}{text}{self.colors['nc']}")

    def check_app_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            token = self.get_do_token()

            if not token:
                self.print_colored("‚ùå DO_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è DO_TOKEN", 'red')
                return None

            headers = {
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json'
            }

            # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
            response = self.session.get(f"{self.api_base}/apps", headers=headers, timeout=10)

            if response.status_code == 401:
                self.print_colored("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏", 'red')
                return None
            elif response.status_code != 200:
                self.print_colored(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}", 'red')
                return None

            apps = response.json().get('apps', [])

            # –ù–∞–π—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
            for app in apps:
                if app['spec']['name'] == self.app_name or app['id'] == self.app_name:
                    return app

            self.print_colored(f"‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '{self.app_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", 'red')
            return None

        except requests.exceptions.RequestException as e:
            self.print_colored(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}", 'red')
            return None
        except Exception as e:
            self.print_colored(f"‚ùå –û—à–∏–±–∫–∞: {e}", 'red')
            return None

    def check_deployment_status(self, app_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        try:
            token = self.get_do_token()
            if not token:
                return None

            headers = {
                'Authorization': f'Bearer {token}',
                'Content-Type': 'application/json'
            }

            # –ü–æ–ª—É—á–∏—Ç—å deployments
            response = self.session.get(f"{self.api_base}/apps/{app_id}/deployments",
                                     headers=headers, timeout=10)

            if response.status_code == 200:
                deployments = response.json().get('deployments', [])
                if deployments:
                    return deployments[0]  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ

            return None

        except Exception as e:
            self.print_colored(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {e}", 'red')
            return None

    def check_app_health(self, app_url):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            response = self.session.get(f"{app_url}/health", timeout=5)
            if response.status_code == 200:
                health_data = response.json()
                return health_data
            else:
                return {'status': 'unhealthy', 'code': response.status_code}
        except Exception as e:
            return {'status': 'error', 'error': str(e)}

    def get_do_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ DO —Ç–æ–∫–µ–Ω–∞"""
        import os
        return os.getenv('DO_TOKEN')

    def format_timestamp(self, timestamp):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏"""
        try:
            dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            return dt.strftime('%Y-%m-%d %H:%M:%S UTC')
        except:
            return timestamp

    def display_app_info(self, app):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
        self.print_colored(f"\nüì± –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–ò–õ–û–ñ–ï–ù–ò–ò: {self.app_name.upper()}", 'blue')
        self.print_colored("=" * 50, 'blue')

        print(f"ID: {app['id']}")
        print(f"–ò–º—è: {app['spec']['name']}")
        print(f"–°—Ç–∞—Ç—É—Å: {app['phase']}")
        print(f"–°–æ–∑–¥–∞–Ω–æ: {self.format_timestamp(app['created_at'])}")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {self.format_timestamp(app['updated_at'])}")

        if app.get('live_url'):
            print(f"URL: {app['live_url']}")

        if app.get('live_domain'):
            print(f"–î–æ–º–µ–Ω: {app['live_domain']}")

    def display_deployment_info(self, deployment):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏"""
        if not deployment:
            self.print_colored("\n‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞", 'red')
            return

        self.print_colored("\nüöÄ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ò", 'blue')
        self.print_colored("=" * 50, 'blue')

        print(f"ID: {deployment['id']}")
        print(f"–°—Ç–∞—Ç—É—Å: {deployment['phase']}")
        print(f"–ü—Ä–∏—á–∏–Ω–∞: {deployment.get('cause', 'N/A')}")
        print(f"–°–æ–∑–¥–∞–Ω–æ: {self.format_timestamp(deployment['created_at'])}")
        print(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {self.format_timestamp(deployment['updated_at'])}")

        if deployment.get('progress'):
            progress = deployment['progress']
            print(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress.get('success_steps', 0)}/{progress.get('total_steps', 0)} —à–∞–≥–æ–≤")

    def monitor(self, max_checks=10):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
        self.print_colored(f"üîç –ù–ê–ß–ò–ù–ê–Æ –ú–û–ù–ò–¢–û–†–ò–ù–ì: {self.app_name}", 'yellow')
        self.print_colored(f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫", 'yellow')
        self.print_colored(f"–ú–∞–∫—Å–∏–º—É–º –ø—Ä–æ–≤–µ—Ä–æ–∫: {max_checks}", 'yellow')
        self.print_colored("=" * 60, 'yellow')

        for check_num in range(1, max_checks + 1):
            self.print_colored(f"\nüîÑ –ü–†–û–í–ï–†–ö–ê #{check_num} ({datetime.now().strftime('%H:%M:%S')})", 'yellow')

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            app = self.check_app_status()
            if app:
                self.display_app_info(app)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
                deployment = self.check_deployment_status(app['id'])
                self.display_deployment_info(deployment)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
                if app['phase'] == 'ACTIVE' and app.get('live_url'):
                    self.print_colored("\nüíö –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø", 'blue')
                    health = self.check_app_health(app['live_url'])
                    if health.get('status') == 'healthy':
                        self.print_colored("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ!", 'green')
                        print(f"–í–µ—Ä—Å–∏—è: {health.get('version', 'N/A')}")
                    else:
                        self.print_colored(f"‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º: {health}", 'red')

                # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –∏ –∑–¥–æ—Ä–æ–≤–æ, –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
                if (app['phase'] == 'ACTIVE' and
                    deployment and deployment['phase'] == 'ACTIVE'):
                    self.print_colored("\nüéâ –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!", 'green')
                    break

            else:
                self.print_colored("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏", 'red')

            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            if check_num < max_checks:
                self.print_colored(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {self.check_interval} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π...", 'yellow')
                time.sleep(self.check_interval)

        self.print_colored("\nüèÅ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–í–ï–†–®–ï–ù", 'blue')

def main():
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è DO App Platform')
    parser.add_argument('app_name', nargs='?', default='doteamcrn',
                       help='–ò–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: doteamcrn)')
    parser.add_argument('--interval', type=int, default=30,
                       help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30)')
    parser.add_argument('--max-checks', type=int, default=10,
                       help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)')

    args = parser.parse_args()

    monitor = DeploymentMonitor(args.app_name, args.interval)
    monitor.monitor(args.max_checks)

if __name__ == "__main__":
    main()
